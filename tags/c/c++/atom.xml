<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c/c++ on Zex</title><link>/tags/c/c++/</link><description>Recent content in c/c++ on Zex</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/tags/c/c++/atom.xml" rel="self" type="application/rss+xml"/><item><title>Solve Common Memory Problems Using Dynamic Analysis Tools</title><link>/post/0004/</link><pubDate>Sun, 06 Aug 2023 15:52:05 +0800</pubDate><guid>/post/0004/</guid><description>该图片由 Jürgen 在 Pixabay 上 发布
c/c++ 可使用检测工具asan valgrind定位程序问题。一般的检查，asan 比 valgrind 更快，结果更精确，经过 time 测试，asan 消耗时间是 valgrind 的 1/30。
环境 valgrind（3.21.0） gcc(13.1.1) 用法 Sanitizer 编译时附带 -fsanitize=address -g 直接执行程序 Valgrind 编译时附带 -g 使用 Valgrind 执行程序 valgrind --tool=memcheck --leak-check=full ./a.out 触发类型 内存问题 memory leak
char *str = (char *)malloc(100 * sizeof(char)); strcpy(str, &amp;#34;Hello Leak!&amp;#34;); printf(&amp;#34;%s\n&amp;#34;, str); /** leak here */ return 0; double free
char *str = (char *)malloc(100 * sizeof(char)); free(str); /** double free */ free(str); return 0; use after free</description></item></channel></rss>