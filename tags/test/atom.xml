<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>test on Zex</title><link>/tags/test/</link><description>Recent content in test on Zex</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 08 Sep 2023 12:43:38 +0800</lastBuildDate><atom:link href="/tags/test/atom.xml" rel="self" type="application/rss+xml"/><item><title>CMake components - use GTest</title><link>/post/0008/</link><pubDate>Fri, 08 Sep 2023 12:43:38 +0800</pubDate><guid>/post/0008/</guid><description>关于单元测试，比较关注的点
易用，将过程专注于测试 方便，可以构造测试的前提条件，重复使用 直观，结果可视化，增强反馈 先来看 cmake 自带的测试驱动程序 ctest，ctest 当且仅当返回值为 0 时，测试成功。这样一来，ctest 框架可以容纳各种语言的测试脚本，扩展性强。但由于一个返回条目只对应一个测试用例，因此更适合用作集成测试，用在单元测试上属于折磨人。
敲定了集成测试，在单元测试上再来对比对比 cunit 和 gtest。
单元测试框架 cunit gtest 的核心思想是一样的。
+----------------------------------------------+ | unit test +---------------+ | | +---------------+ +---&amp;gt;+ test 1 | | | | | | +---------------+ | +------&amp;gt;+ Suit 1 +--+ . | | | | | | +---------------+ | +---------------- | | +---------------+ +---&amp;gt;+ test n | | | | | | . +---------------+ | | Registry +--+ +----------------------------------------------+ | | | .</description></item></channel></rss>