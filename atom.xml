<?xml version="1.0" encoding="utf-8" standalone="yes"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><title>Zex</title><id>/</id><description>Recent content on Zex</description><generator>Hugo -- gohugo.io</generator><language>en</language><updated>2023-08-17T03:04:38Z</updated><link href="/atom.xml" rel="self" type="application/rss+xml"/><entry><title>CMake components - use Doxygen</title><id>/post/0007/</id><link href="/post/0007/" rel="alternate" type="text/html"/><updated>2023-08-17T03:04:38Z</updated><published>2023-08-17T03:04:38Z</published><description>该图片由 Raka C. 在 Pixabay 上发布
Doxygen 使用流程 1. 生成配置 $ doxygen -g Doxyfile.in 2. 修改配置 根据需要修改 Doxyfile.in 里的选项
# Project related configuration …</description><content type="html"><![CDATA[
        <p>该图片由 Raka C. 在 Pixabay 上<a href="https://pixabay.com/zh/illustrations/dam-floodgate-stop-gates-8176005/">发布</a></p>
<h2 id="doxygen-使用流程">Doxygen 使用流程</h2>
<h3 id="1-生成配置">1. 生成配置</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ doxygen -g Doxyfile.in
</span></span></code></pre></div><h3 id="2-修改配置">2. 修改配置</h3>
<p>根据需要修改 Doxyfile.in 里的选项</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># Project related configuration options</span>
</span></span><span class="line"><span class="cl"><span class="nv">DOXYFILE_ENCODING</span>      <span class="o">=</span> UTF-8
</span></span><span class="line"><span class="cl"><span class="nv">PROJECT_NAME</span>           <span class="o">=</span> <span class="s2">&#34;My Project&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">PROJECT_NUMBER</span>         <span class="o">=</span> v0.1.0
</span></span><span class="line"><span class="cl"><span class="nv">PROJECT_BRIEF</span>          <span class="o">=</span> <span class="s2">&#34;a research project&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">PROJECT_LOGO</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">OUTPUT_DIRECTORY</span>       <span class="o">=</span> doc/
</span></span><span class="line"><span class="cl"><span class="nv">ALLOW_UNICODE_NAMES</span>    <span class="o">=</span> NO
</span></span><span class="line"><span class="cl"><span class="nv">OUTPUT_LANGUAGE</span>        <span class="o">=</span> English
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">OPTIMIZE_OUTPUT_FOR_C</span>  <span class="o">=</span> YES
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the input files</span>
</span></span><span class="line"><span class="cl"><span class="nv">INPUT</span>                  <span class="o">=</span> @PROJECT_SOURCE_DIR@
</span></span><span class="line"><span class="cl"><span class="nv">RECURSIVE</span>              <span class="o">=</span> YES 
</span></span><span class="line"><span class="cl"><span class="nv">EXCLUDE</span>                <span class="o">=</span> @PROJECT_SOURCE_DIR@/etc @PROJECT_SOURCE_DIR@/build 
</span></span><span class="line"><span class="cl"><span class="nv">USE_MDFILE_AS_MAINPAGE</span> <span class="o">=</span> @PROJECT_SOURCE_DIR@/README.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the LaTeX output</span>
</span></span><span class="line"><span class="cl"><span class="nv">GENERATE_LATEX</span>         <span class="o">=</span> NO
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the HTML output</span>
</span></span><span class="line"><span class="cl"><span class="nv">GENERATE_TREEVIEW</span>      <span class="o">=</span> YES
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to diagram generator tools</span>
</span></span><span class="line"><span class="cl"><span class="nv">HAVE_DOT</span>               <span class="o">=</span> YES
</span></span><span class="line"><span class="cl"><span class="nv">CALL_GRAPH</span>             <span class="o">=</span> YES
</span></span><span class="line"><span class="cl"><span class="nv">CALLER_GRAPH</span>           <span class="o">=</span> YES
</span></span><span class="line"><span class="cl"><span class="nv">DOT_IMAGE_FORMAT</span>       <span class="o">=</span> svg
</span></span><span class="line"><span class="cl"><span class="nv">INTERACTIVE_SVG</span>        <span class="o">=</span> YES
</span></span></code></pre></div><h3 id="3-集成到-cmake">3. 集成到 CMake</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmake" data-lang="cmake"><span class="line"><span class="cl"><span class="c"># doxygen.cmake
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">find_package</span> <span class="p">(</span><span class="s">Doxygen</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">if</span> <span class="p">(</span><span class="s">DOXYGEN_FOUND</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="nb">message</span><span class="p">(</span><span class="s2">&#34;-- -- Create and Install the HTML based API document&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="nb">set</span><span class="p">(</span><span class="s">DOXYFILE_IN</span> <span class="o">${</span><span class="nv">PROJECT_SOURCE_DIR</span><span class="o">}</span><span class="s">/Doxyfile.in</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="nb">set</span><span class="p">(</span><span class="s">DOXYFILE</span>    <span class="o">${</span><span class="nv">PROJECT_BINARY_DIR</span><span class="o">}</span><span class="s">/Doxyfile</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="nb">configure_file</span> <span class="p">(</span><span class="o">${</span><span class="nv">DOXYFILE_IN</span><span class="o">}</span> <span class="o">${</span><span class="nv">DOXYFILE</span><span class="o">}</span> <span class="s">@ONLY</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="c"># make doc
</span></span></span><span class="line"><span class="cl"><span class="c"></span>        <span class="nb">add_custom_target</span> <span class="p">(</span><span class="s">doc</span> <span class="c"># ALL 
</span></span></span><span class="line"><span class="cl"><span class="c"></span>                    <span class="s">COMMAND</span> <span class="o">${</span><span class="nv">DOXYGEN_EXECUTABLE</span><span class="o">}</span> <span class="o">${</span><span class="nv">DOXYFILE</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">                    <span class="s">WORKING_DIRECTORY</span> <span class="o">${</span><span class="nv">PROJECT_BINARY_DIR</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">                    <span class="s">COMMENT</span> <span class="s2">&#34;Generate docs using Doxygen&#34;</span> <span class="s">VERBATIM</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">endif</span> <span class="p">()</span><span class="err">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmake" data-lang="cmake"><span class="line"><span class="cl"><span class="c"># CMakeLists.txt
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">include</span><span class="p">(</span><span class="s">doxygen.cmake</span><span class="p">)</span><span class="err">
</span></span></span></code></pre></div><h3 id="4-doxygen-注释风格">4. Doxygen 注释风格</h3>
<ul>
<li>
<p>详细描述</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * ... text ...
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">or</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/************************************************
</span></span></span><span class="line"><span class="cl"><span class="cm"> *  ... text
</span></span></span><span class="line"><span class="cl"><span class="cm"> ***********************************************/</span>
</span></span></code></pre></div></li>
<li>
<p>简要描述</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*! \brief Brief description.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *         Brief description continued.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> *  Detailed description starts here.
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">or</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">/// Brief description.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/** Detailed description. */</span>
</span></span></code></pre></div></li>
<li>
<p>函数内描述</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">var</span><span class="p">;</span> <span class="cm">/**&lt; Detailed description after the member */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">var</span><span class="p">;</span> <span class="c1">//!&lt; Brief description after the member
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span> <span class="cm">/**&lt; [in] docs for input parameter v. */</span><span class="p">);</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="效果">效果</h2>
<p>找个 CMake 项目试一下吧。<code>make doc</code> 在 12 线程机器上跑了 3min，算是无缝接入，效果还行。</p>
<p>






<img src="https://pic.imgdb.cn/item/64ddfb5d661c6c8e54ee0abf.png" alt=""  /></p>
<h2 id="参考">参考</h2>
<ul>
<li><em><a href="https://www.doxygen.nl/manual/doxygen_usage.html">doxygen - Usage</a></em></li>
<li><em><a href="https://www.doxygen.nl/manual/config.html">doxygen - Configuration</a></em></li>
<li><em><a href="https://www.doxygen.nl/manual/docblocks.html">doxygen - Documenting the code</a></em></li>
<li><em><a href="https://www.cnblogs.com/the-capricornus/p/4717566.html">cmake - configure_file</a></em></li>
</ul>

      ]]></content></entry><entry><title>Intro to Tun/Tap</title><id>/post/0006/</id><link href="/post/0006/" rel="alternate" type="text/html"/><updated>2023-08-10T01:54:51Z</updated><published>2023-08-10T01:54:51Z</published><description>该图片由 Simon Oberthaler 在 Pixabay 上 发布
原理 +---------------+ +---------------+ +---------------+ | application A | | application B | | …</description><content type="html"><![CDATA[
        <p>该图片由 Simon Oberthaler 在 Pixabay 上








<a href="https://pixabay.com/zh/photos/elephants-herd-pachyderms-mammals-8171393/" >发布</a></p>
<h2 id="原理">原理</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-basic" data-lang="basic"><span class="line"><span class="cl"><span class="o">+---------------+</span><span class="w">         </span><span class="o">+---------------+</span><span class="w">         </span><span class="o">+---------------+</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="w"> </span><span class="vg">application</span><span class="w"> </span><span class="vg">A</span><span class="w"> </span><span class="o">|</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="vg">application</span><span class="w"> </span><span class="vg">B</span><span class="w"> </span><span class="o">|</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="vg">application</span><span class="w"> </span><span class="vg">C</span><span class="w"> </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+-------^-------+</span><span class="w">         </span><span class="o">+-------+-------+</span><span class="w">         </span><span class="o">+-------+-------+</span><span class="w">       </span><span class="vg">user</span><span class="o">-</span><span class="vg">mode</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                         </span><span class="o">|</span><span class="w">                         </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+-----------------------------------------------------------------------------------+</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                         </span><span class="o">|</span><span class="w">                         </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                 </span><span class="o">+-------</span><span class="vg">v</span><span class="o">-------------------------</span><span class="vg">v</span><span class="o">-------+</span><span class="w">     </span><span class="vg">kernel</span><span class="o">-</span><span class="vg">mode</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                 </span><span class="o">|</span><span class="w">               </span><span class="vg">layer</span><span class="w"> </span><span class="vg">socket</span><span class="w">              </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                 </span><span class="o">+--------------------^--------------------+</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                                      </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                 </span><span class="o">+--------------------</span><span class="vg">v</span><span class="o">--------------------+</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                 </span><span class="o">|</span><span class="w">              </span><span class="vg">TCP</span><span class="o">/</span><span class="vg">IP</span><span class="w"> </span><span class="vg">stack</span><span class="w">               </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                 </span><span class="o">+--------^-----------------------^--------+</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                          </span><span class="o">|</span><span class="w">                       </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+-------</span><span class="vg">v</span><span class="o">-------+</span><span class="w">         </span><span class="o">+--------</span><span class="vg">v</span><span class="o">--------+</span><span class="w">     </span><span class="o">+--------</span><span class="vg">v</span><span class="o">--------+</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="w"> </span><span class="o">/</span><span class="vg">dev</span><span class="o">/</span><span class="vg">net</span><span class="o">/</span><span class="vg">tun</span><span class="w">  </span><span class="o">|</span><span class="w">         </span><span class="o">|</span><span class="w"> </span><span class="vg">Drivers</span><span class="w"> </span><span class="vg">for</span><span class="w">     </span><span class="o">|</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="vg">Drivers</span><span class="w"> </span><span class="vg">for</span><span class="w">     </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">|</span><span class="w">   </span><span class="vg">char</span><span class="w"> </span><span class="vg">drivers</span><span class="o">|</span><span class="w">         </span><span class="o">|</span><span class="w">    </span><span class="vg">virtual</span><span class="w"> </span><span class="vg">NIC</span><span class="w">  </span><span class="o">|</span><span class="w">     </span><span class="o">|</span><span class="w">   </span><span class="vg">pysical</span><span class="w"> </span><span class="vg">NIC</span><span class="w">   </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+-------^-------+</span><span class="w">         </span><span class="o">+--------^--------+</span><span class="w">     </span><span class="o">+--------^--------+</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                          </span><span class="o">|</span><span class="w">                       </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                 </span><span class="o">+--------</span><span class="vg">v</span><span class="o">--------+</span><span class="w">     </span><span class="o">+--------</span><span class="vg">v</span><span class="o">--------+</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">        </span><span class="p">(</span><span class="vg">tun</span><span class="w"> </span><span class="vg">tap</span><span class="p">)</span><span class="o">|</span><span class="w">    </span><span class="vg">virtual</span><span class="w"> </span><span class="vg">NIC</span><span class="w">  </span><span class="o">|</span><span class="w">     </span><span class="o">|</span><span class="w">   </span><span class="vg">pysical</span><span class="w"> </span><span class="vg">NIC</span><span class="w">   </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                 </span><span class="o">+--------^--------+</span><span class="w">     </span><span class="o">+--------^--------+</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                          </span><span class="o">|</span><span class="w">                       </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">|</span><span class="w">                          </span><span class="o">|</span><span class="w">                       </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">+--------------------------+</span><span class="w">                       </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="w">                                                           </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="o">+-----------------------------------------------------------------------------------+</span>
</span></span><span class="line"><span class="cl"><span class="w">                                                           </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="w">                                      </span><span class="o">+--------------+</span><span class="w">     </span><span class="o">|</span>
</span></span><span class="line"><span class="cl"><span class="w">                                      </span><span class="o">|</span><span class="w">   </span><span class="vg">Internet</span><span class="w">   </span><span class="o">&lt;-----+</span>
</span></span><span class="line"><span class="cl"><span class="w">                                      </span><span class="o">+--------------+</span>
</span></span></code></pre></div><h2 id="实践">实践</h2>
<h3 id="code">code</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;linux/if.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;linux/if_tun.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/ioctl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">tun_alloc</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">dev</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">ifreq</span> <span class="n">ifr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">err</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">clonedev</span> <span class="o">=</span> <span class="s">&#34;/dev/net/tun&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* 打开 /dev/net/tun */</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">clonedev</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">fd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ifr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ifr</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">ifr</span><span class="p">.</span><span class="n">ifr_flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* 未指定设备名称时，由内核分配设备名 */</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">dev</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">strncpy</span><span class="p">(</span><span class="n">ifr</span><span class="p">.</span><span class="n">ifr_name</span><span class="p">,</span> <span class="n">dev</span><span class="p">,</span> <span class="n">IFNAMSIZ</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* 通过 ioctl() 向内核注册网络设备，完成创建虚拟接口
</span></span></span><span class="line"><span class="cl"><span class="cm">     * 通过文件描述符 fd 关联，与接口通信 */</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">err</span> <span class="o">=</span> <span class="nf">ioctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">TUNSETIFF</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">ifr</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">err</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//strcpy(dev, ifr.ifr_name); // this line leads to errors.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">nread</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">1500</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="nf">tun_alloc</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">IFF_TUN</span> <span class="o">|</span> <span class="n">IFF_NO_PI</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;tun alloc failed!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">nread</span> <span class="o">=</span> <span class="nf">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">)))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;read failed!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nf">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="cm">/* process packets here */</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* 程序关闭文件描述符、网络设备和所有相应的路线将会消失 */</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="compile--run">compile &amp; run</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ gcc tun.c -o tun
</span></span><span class="line"><span class="cl">$ ./tun
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># open another window</span>
</span></span><span class="line"><span class="cl">$ ip addr add 10.0.0.1/24 dev tun0
</span></span><span class="line"><span class="cl">$ ip link <span class="nb">set</span> tun0 up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># test packet acceptance</span>
</span></span><span class="line"><span class="cl">$ ping 10.0.0.2
</span></span><span class="line"><span class="cl">PING 10.0.0.2 <span class="o">(</span>10.0.0.2<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.0.0.2: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.024 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.0.0.2: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.035 ms
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><h2 id="参考">参考</h2>
<ul>
<li>
<p><em>








<a href="https://backreference.org/2010/03/26/tuntap-interface-tutorial/" >Tun/Tap interface tutorial</a></em></p>
</li>
<li>
<p><em>








<a href="https://www.kernel.org/doc/Documentation/networking/tuntap.txt" >Documentation/networking/tuntap.txt</a></em></p>
</li>
<li>
<p><em>








<a href="https://github.com/torvalds/linux/blob/v4.4/drivers/net/tun.c" >net/tun.c</a></em></p>
</li>
<li>
<p><em>








<a href="https://zhuanlan.zhihu.com/p/462501573" >云原生虚拟化：一文读懂网络虚拟化之 tun/tap 网络设备</a></em></p>
</li>
</ul>

      ]]></content></entry><entry><title>Self-hosting services using the nginx ssl proxy</title><id>/post/0005/</id><link href="/post/0005/" rel="alternate" type="text/html"/><updated>2023-08-07T02:57:10Z</updated><published>2023-08-07T02:57:10Z</published><description>该图片由 Pete Linforth 在 Pixabay 上发布
结构图 基础点 容器可以加入同一个网络中，并相互通过容器名通信 可以用 expect 脚本自动化控制命令行下程序与用户的交互 步骤 1. 生成自签名证书 openssl req -x509 -newkey …</description><content type="html"><![CDATA[
        <p>该图片由 Pete Linforth 在 Pixabay 上<a href="https://pixabay.com/zh/illustrations/cyber-security-information-security-3400657/">发布</a></p>
<h2 id="结构图">结构图</h2>
<p>






<img src="https://pic.imgdb.cn/item/64d0e1231ddac507cc915777.png" alt=""  /></p>
<h2 id="基础点">基础点</h2>
<ol>
<li>容器可以加入同一个网络中，并相互通过容器名通信</li>
<li>可以用 expect 脚本自动化控制命令行下程序与用户的交互</li>
</ol>
<h2 id="步骤">步骤</h2>
<h3 id="1-生成自签名证书">1. 生成自签名证书</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days <span class="m">365</span>
</span></span></code></pre></div><h3 id="2-配置-nginxconf">2. 配置 nginx.conf</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">    server <span class="o">{</span>
</span></span><span class="line"><span class="cl">        listen       <span class="m">11443</span> ssl<span class="p">;</span>
</span></span><span class="line"><span class="cl">        server_name  localhost<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        ssl_certificate       /usr/local/nginx/certs/cert.pem<span class="p">;</span>
</span></span><span class="line"><span class="cl">        ssl_certificate_key   /usr/local/nginx/certs/key.pem<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        location / <span class="o">{</span>
</span></span><span class="line"><span class="cl">            proxy_set_header  Host              <span class="nv">$http_host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            proxy_set_header  X-Real-IP         <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            proxy_set_header  X-Forwarded-For   <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            proxy_pass http://web:80<span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># server { # 新增 Web 服务</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#    ...</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># }</span>
</span></span></code></pre></div><h3 id="3-expect-脚本">3. expect 脚本</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># pem.expect</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/usr/bin/expect</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">set</span> timeout <span class="m">30</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> password <span class="s2">&#34;123456&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">spawn /usr/local/nginx/sbin/nginx
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">expect <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;PEM&#34;</span> <span class="o">{</span> send <span class="s2">&#34;</span><span class="nv">$password</span><span class="s2">\r&#34;</span><span class="p">;</span> exp_continue <span class="o">}</span> <span class="c1"># 多个使用 SSL 的服务可以重复 send 多次</span>
</span></span><span class="line"><span class="cl">    eof
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="4-编译生成-nginx-镜像">4. 编译生成 nginx 镜像</h3>
<p>也可以直接用现成的，打算熟悉下过程，有空读读源码</p>
<p><code>docker build -t nginx-proxy .</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /code</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># ubuntu 替换镜像源</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> sed -i s@/security.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> apt-get clean <span class="o">&amp;&amp;</span> apt-get update -y<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 编译 nginx 的库 &amp; 工具</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get install gcc make libz-dev libpcre3-dev libssl-dev expect wget -y<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 编译 nginx</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> wget http://nginx.org/download/nginx-1.24.0.tar.gz <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> tar xf ./nginx-1.24.0.tar.gz <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ./nginx-1.24.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> ./configure --prefix<span class="o">=</span>/usr/local/nginx --with-http_ssl_module  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> make <span class="o">&amp;&amp;</span> make install<span class="err">
</span></span></span></code></pre></div><h3 id="5-compose-部署">5. compose 部署</h3>
<p>创建互联网络 <code>docker network create ngx-net</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">  </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 内部监听端口 80  </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">python:3.7-alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">ngx-net</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tty</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-proxy:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-proxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">ngx-net</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">ngx/certs:/usr/local/nginx/certs</span><span class="w"> </span><span class="c"># 存放步骤1 pem 证书</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">ngx/conf:/usr/local/nginx/conf  </span><span class="w"> </span><span class="c"># 存放步骤2 conf 文件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">ngx/sbin:/usr/local/nginx/sbin  </span><span class="w"> </span><span class="c"># 存放步骤3 expect 脚本</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">11443</span><span class="p">:</span><span class="m">11443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tty</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><h3 id="6-启动">6. 启动</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker compose up -d
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> -it nginx-proxy expect pem.expect
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>容器隔离了环境，复杂度转移到了部署层面上。以上在查了不少资料后，成功使用 https 访问时居然产生了谜一般的成就感，有点离谱了……</p>

      ]]></content></entry><entry><title>Solve Common Memory Problems Using Dynamic Analysis Tools</title><id>/post/0004/</id><link href="/post/0004/" rel="alternate" type="text/html"/><updated>2023-08-06T07:52:05Z</updated><published>2023-08-06T07:52:05Z</published><description>该图片由 Jürgen 在 Pixabay 上 发布
c/c++ 可使用检测工具asan valgrind定位程序问题。一般的检查，asan 比 valgrind 更快，结果更精确，经过 time 测试，asan 消耗时间是 valgrind 的 1/30。 …</description><content type="html"><![CDATA[
        <p>该图片由 Jürgen 在 Pixabay 上








<a href="https://pixabay.com/zh/photos/ladybug-beetle-leaf-insect-bug-6364312/" >发布</a></p>
<p>c/c++ 可使用检测工具<code>asan</code> <code>valgrind</code>定位程序问题。一般的检查，asan 比 valgrind 更快，结果更精确，经过 <code>time</code> 测试，asan 消耗时间是 valgrind 的 1/30。</p>
<h2 id="环境">环境</h2>
<ul>
<li>valgrind（3.21.0）</li>
<li>gcc(13.1.1)</li>
</ul>
<h2 id="用法">用法</h2>
<ul>
<li>Sanitizer 编译时附带 <code>-fsanitize=address -g</code> 直接执行程序</li>
<li>Valgrind  编译时附带 <code>-g</code> 使用 Valgrind 执行程序 <code>valgrind --tool=memcheck --leak-check=full ./a.out</code></li>
</ul>
<h2 id="触发类型">触发类型</h2>
<h3 id="内存问题">内存问题</h3>
<ul>
<li>
<p>memory leak</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nf">strcpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&#34;Hello Leak!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cm">/** leak here */</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span></code></pre></div></li>
<li>
<p>double free</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nf">free</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cm">/** double free */</span>
</span></span><span class="line"><span class="cl"><span class="nf">free</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span></code></pre></div></li>
<li>
<p>use after free</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nf">free</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cm">/** use after free */</span>
</span></span><span class="line"><span class="cl"><span class="nf">strcpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&#34;Hello Leak!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span></code></pre></div></li>
<li>
<p>heap buffer overflow</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="o">*</span> <span class="mi">12</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* heap-buffer-overflow */</span>
</span></span><span class="line"><span class="cl"><span class="nf">strcpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&#34;Hello World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;string is :%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nf">free</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span></code></pre></div></li>
<li>
<p>stack buffer overflow</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="cm">/** stack-buffer-overflow */</span>
</span></span><span class="line"><span class="cl"><span class="n">str</span><span class="p">[</span><span class="mi">101</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span></code></pre></div></li>
<li>
<p>global buffer overflow</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">array</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* global-buffer-overflow */</span>
</span></span><span class="line"><span class="cl">    <span class="n">array</span><span class="p">[</span><span class="mi">101</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>alloc/dealloc mismatch</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="n">new</span> <span class="kt">char</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/** alloc-dealloc-mismatch*/</span>  
</span></span><span class="line"><span class="cl">    <span class="n">delete</span> <span class="n">str</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
<p>​</p>
<p>sanitizer 给出的信息比较直观，如 memory leak 的执行信息（类型、行数、影响）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Hello Leak!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">=================================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">==</span><span class="nv">212706</span><span class="o">==</span>ERROR: LeakSanitizer: detected memory leaks
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Direct leak of <span class="m">100</span> byte<span class="o">(</span>s<span class="o">)</span> in <span class="m">1</span> object<span class="o">(</span>s<span class="o">)</span> allocated from:
</span></span><span class="line"><span class="cl">    <span class="c1">#0 0x7f6aa04e1359 in __interceptor_malloc /usr/src/debug/gcc/gcc/libsanitizer/asan/asan_malloc_linux.cpp:69</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#1 0x55c93274c1aa in main ***************************/leak.c:7</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#2 0x7f6aa023984f  (/usr/lib/libc.so.6+0x2384f) (BuildId: 2f005a79cd1a8e385972f5a102f16adba414d75e)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SUMMARY: AddressSanitizer: <span class="m">100</span> byte<span class="o">(</span>s<span class="o">)</span> leaked in <span class="m">1</span> allocation<span class="o">(</span>s<span class="o">)</span>.
</span></span></code></pre></div><h3 id="线程问题附带测试">线程问题（附带测试）</h3>
<p>多线程场景下常见的错误</p>
<ul>
<li>
<p>data race</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">g_var</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span><span class="o">*</span> <span class="nf">thread1</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="n">g_var</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span><span class="o">*</span> <span class="nf">thread2</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="n">g_var</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>dead lock</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">pthread_mutex_t</span> <span class="n">mutex_a</span><span class="p">,</span> <span class="n">mutex_b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">pthread_barrier_t</span> <span class="n">barrier</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span><span class="o">*</span> <span class="nf">lock_a</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex_a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">pthread_barrier_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">barrier</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nf">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex_b</span><span class="p">);</span>  <span class="cm">/* 等待 lock_b 释放*/</span>
</span></span><span class="line"><span class="cl">        <span class="nf">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex_b</span><span class="p">);</span>        
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex_a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span><span class="o">*</span> <span class="nf">lock_b</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex_b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">pthread_barrier_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">barrier</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nf">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex_a</span><span class="p">);</span>  <span class="cm">/* 等待 lock_a 释放 */</span>
</span></span><span class="line"><span class="cl">        <span class="nf">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex_a</span><span class="p">);</span>        
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex_b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
<p>data race 方面，tsan 相比 valgrind 结果基本一致，但速度完胜。</p>
<p>dead lock 方面，valgrind 能检测出线程退出未解锁导致的死锁，对相互死锁没有办法，tsan 对死锁完全没有办法。</p>
<h2 id="想法">想法</h2>
<p>比排查手段更重要的是排查思路。线上的环境不比生产环境工具齐全，还有着种种约束（访问时段限制，服务启停限制等）增加成本。保持思路清晰，通过服务日志、系统记录信息寻找关键点，更考验对系统的整体了解程度。</p>
<p>比排查思路更接近问题源头的就是设计思路了……</p>
<h2 id="参考">参考</h2>
<ul>
<li><em>








<a href="https://github.com/google/sanitizers" >Sanitizers</a></em></li>
</ul>

      ]]></content></entry><entry><title>Work With An Efficient Environment</title><id>/post/0003/</id><link href="/post/0003/" rel="alternate" type="text/html"/><updated>2023-08-06T01:08:47Z</updated><published>2023-08-06T01:08:47Z</published><description>该图片由 Gauthier Pous 在 Pixabay 上 发布
经验分享 文本编辑器 - vim Vim 是高度可配置的，然而定制是一件很个性化的事情，因此我试图避免建议什么应该放进你的 vimrc 里，什么不应该。相反，本书关注的是 Vim 编辑器的核心功能。 …</description><content type="html"><![CDATA[
        <p>该图片由 Gauthier Pous 在 Pixabay 上 








<a href="https://pixabay.com/zh/photos/turtle-turtle-earth-land-market-5201848/" >发布</a></p>
<h2 id="经验分享">经验分享</h2>
<h3 id="文本编辑器---vim">文本编辑器 - vim</h3>
<blockquote>
<p>Vim 是高度可配置的，然而定制是一件很个性化的事情，因此我试图避免建议什么应该放进你的 vimrc 里，什么不应该。相反，本书关注的是 Vim 编辑器的核心功能。不管你是通过 SSH 登录远端服务器工作，还是在用本地安装了插件而增添了额外功能的 GVim，这些功能都永远在那儿。精通了 Vim 的核心功能，你就获得了一个可移植的、强大的文本编辑工具。</p>
</blockquote>
<p>之前求快，学人将 Vim 打造成 IDE，上一堆插件，改键盘映射；又学人将 NVim 打造成 IDE，上一堆插件，改键盘映射。常常插件一更新，一堆报错，又去看文档，修报错。折腾来折腾去，唯独专业知识没学上几分。</p>
<p>就此老实了，写代码该用 IDE 就用 IDE，慢慢理解 Vim 核心功能才是正道。</p>
<ul>
<li>
<p>练习 vimtutor (20min)</p>
</li>
<li>
<p>实践 <em>vim 实用技巧</em></p>
</li>
<li>
<p>根据需要编写 vimscript</p>
</li>
</ul>
<p>Slow is Smooth, and Smooth is Fast.</p>
<h3 id="交互式shell---zshhttpsgithubcomzsh-userszsh">交互式shell - 








<a href="https://github.com/zsh-users/zsh" >zsh</a></h3>
<p>zsh 功能很强大，最基础的命令行历史补全，解脱重复工作。</p>
<ul>
<li>








<a href="https://github.com/ohmyzsh/ohmyzsh" >配置 ohmyzsh</a></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装zsh-autosuggestions 自动补全</span>
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> ~/.oh-my-zsh/plugins/
</span></span><span class="line"><span class="cl">$ git clone https://github.com/zsh-users/zsh-autosuggestions
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ vim ~/.zshrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">plugins</span><span class="o">=(</span>
</span></span><span class="line"><span class="cl">	git                  <span class="c1"># git 命令缩写</span>
</span></span><span class="line"><span class="cl">	zsh-autosuggestions  <span class="c1"># 命令行补全</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="c1"># ... https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 不要忘了 source ～/.zshrc 让配置生效</span>
</span></span></code></pre></div><h3 id="终端复用---tmuxhttpsgithubcomtmuxtmux">终端复用 - 








<a href="https://github.com/tmux/tmux" >tmux</a></h3>
<p>工作中经常远程连接服务器的人，大多经历过链接断开的情况。随着 ssh 断连，正在进行的代码编译、定位bug、修改配置等多个窗口都没了，又要耐着性子重连，敲命令配置。</p>
<p>或者，今天需要继续昨天做不完的工作，通过 tmux 保留工作环境可以省时间，还能帮助回忆起之前的思路。</p>
<ul>
<li>








<a href="https://github.com/gpakosz/.tmux" >配置.tmux</a></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装tmux</span>
</span></span><span class="line"><span class="cl">$ sudo pacman -S tmux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 加载 .tmux 配置</span>
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> 
</span></span><span class="line"><span class="cl">$ git clone https://github.com/gpakosz/.tmux.git
</span></span><span class="line"><span class="cl">$ ln -sf .tmux/.tmux.conf
</span></span><span class="line"><span class="cl">$ cp .tmux/.tmux.conf.local .
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配合 zsh 使用</span>
</span></span><span class="line"><span class="cl">$ vim .tmux.conf
</span></span><span class="line"><span class="cl"><span class="c1"># 添加下面两行，指定 tmux 使用 zsh</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -g default-shell /bin/zsh
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -g default-command /bin/zsh
</span></span><span class="line"><span class="cl">:wq
</span></span></code></pre></div><h3 id="垃圾回收---trash-cli">垃圾回收 - trash-cli</h3>
<p>单纯防止误删文件导致不必要的麻烦。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装</span>
</span></span><span class="line"><span class="cl">$ sudo pacman -S trash-cli
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置~/.zshrc</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">rm</span><span class="o">=</span><span class="s2">&#34;trash&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">rr</span><span class="o">=</span><span class="s2">&#34;trash-restore&#34;</span>
</span></span></code></pre></div><h3 id="远程连接---ssh-keygen">远程连接 - ssh-keygen</h3>
<p>一次次输入密码连接服务器也是让人头疼的事情。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 生成 ecs ecs.pub</span>
</span></span><span class="line"><span class="cl">$ ssh-keygen -t rsa -f ecs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 本地私钥配置</span>
</span></span><span class="line"><span class="cl">$ vim ~/.ssh/config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Host ecs
</span></span><span class="line"><span class="cl">    HostName xx.xx.xx.xx
</span></span><span class="line"><span class="cl">    User user-name
</span></span><span class="line"><span class="cl">        IdentityFile ~/.ssh/server/ecs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Host ecs2
</span></span><span class="line"><span class="cl">    HostName xx.xx.xx.xx
</span></span><span class="line"><span class="cl">    User user-name
</span></span><span class="line"><span class="cl">        IdentityFile ~/.ssh/server/ecs2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 服务器公钥配置</span>
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> ~/.ssh/
</span></span><span class="line"><span class="cl">$ cat ecs.pub &gt;&gt; authorized_keys
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 连接</span>
</span></span><span class="line"><span class="cl">$ ssh ecs
</span></span></code></pre></div><h2 id="参考">参考</h2>
<ul>
<li><em>








<a href="https://aquaregia.gitbooks.io/tmux-productive-mouse-free-development_zh/content/" >tmux: Productive Mouse-Free Development</a></em></li>
<li><em>








<a href="https://coolshell.cn/articles/11312.html/comment-page-2#comments" >无插件 VIM 编程技巧</a></em></li>
<li><em>Vim 实用技巧</em></li>
<li><em>Vim8 文本处理实战</em></li>
</ul>
<h2 id="rip-bram">R.I.P Bram</h2>
<p>2023/08/03 Esc :wq</p>

      ]]></content></entry><entry><title>SVN Command Line Usage With Docker</title><id>/post/0002/</id><link href="/post/0002/" rel="alternate" type="text/html"/><updated>2023-08-05T00:22:28Z</updated><published>2023-08-05T00:22:28Z</published><description>该图片由 Gerd Altmann 在 Pixabay 上发布
Self-Hosted SVN 服务属于 IO 密集型任务。相比于 Git，更适合于频繁进行大型二进制文件的存取。且内存占用极低，从自搭建情况看，一般在 3MB 左右，峰值传输 20MB 左右。
Server …</description><content type="html"><![CDATA[
        <p>该图片由 Gerd Altmann 在 Pixabay 上<a href="https://pixabay.com/zh/photos/a-book-library-read-literature-3480216/">发布</a></p>
<h2 id="self-hosted">Self-Hosted</h2>
<p>SVN 服务属于 IO 密集型任务。相比于 Git，更适合于频繁进行大型二进制文件的存取。且内存占用极低，从自搭建情况看，一般在 3MB 左右，峰值传输 20MB 左右。</p>
<h2 id="server-with-docker">Server with docker</h2>
<ol>
<li>安装服务 <code>docker compose up -d</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># docker-compose.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">svn-server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  	</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">garethflowers/svn-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  	</span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">svn-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  	</span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;/svn:/var/opt/svn&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  	</span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;3690:3690&#39;</span><span class="w">
</span></span></span></code></pre></div><ol start="2">
<li>
<p>生成仓库 <code>docker exec -it svn-server svnadmin create repo</code></p>
</li>
<li>
<p>配置仓库账户文件 位于 <code>^/repo/conf/{svnserver.conf passwd authz}</code></p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># svnserver.conf</span>
</span></span><span class="line"><span class="cl">anon-access <span class="o">=</span> none     <span class="c1"># 非注册用户权限</span>
</span></span><span class="line"><span class="cl">auth-access <span class="o">=</span> write    <span class="c1"># 注册用户权限</span>
</span></span><span class="line"><span class="cl">password-db <span class="o">=</span> passwd   <span class="c1"># 密码文件路径</span>
</span></span><span class="line"><span class="cl">authz-db <span class="o">=</span> authz       <span class="c1"># 权限文件路径</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># passwd</span>
</span></span><span class="line"><span class="cl"><span class="nv">user</span> <span class="o">=</span> password        <span class="c1"># 填写用户名密码注册</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># authz</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>repo:/path<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">user</span> <span class="o">=</span> rw              <span class="c1"># 设置用户名拥有的仓库路径权限</span>
</span></span></code></pre></div><h2 id="client">Client</h2>
<ol>
<li>安装客户端 <code>sudo pacman -S subversion</code></li>
<li>拉取服务端仓库 <code>svn checkout svn://path</code></li>
<li>其余命令用到再查 <code>svn -h</code></li>
</ol>
<h2 id="usage">Usage</h2>
<blockquote>
<p>我是为了这点醋，才包的这顿饺子</p>
</blockquote>
<h3 id="搭建书库">搭建书库</h3>
<p>拥有一座图书馆听起来很酷，按照 <a href="https://gist.github.com/zexsphere/604a37648b7ac04cd99a5ebbd851d699">中图法</a> 将现有书籍分类，托管于云端 SVN 服务中。</p>
<p>






<img src="https://pic.imgdb.cn/item/64cdb6241ddac507cc70d920.png" alt=""  /></p>

      ]]></content></entry><entry><title>reading notes for *How to Read a Book* (1)</title><id>/post/0001/</id><link href="/post/0001/" rel="alternate" type="text/html"/><updated>2023-07-04T14:10:57Z</updated><published>2023-07-04T14:10:57Z</published><description>该图片由Mirosław i Joanna Bucholc在Pixabay上 发布
将读书的主要目的当作是增进自身理解能力的人，被称作“阅读的人（readers）”。
脉络 信息时代海量的资讯阻碍了理解力，对增进世界的了解没有带来实质的帮助。接收者每天得到的是他人打包好的态度和观 …</description><content type="html"><![CDATA[
        <p>该图片由Mirosław i Joanna Bucholc在Pixabay上








<a href="https://pixabay.com/zh/photos/lake-sunset-friends-pier-dusk-8030021" >发布</a></p>
<hr>
<p>将读书的主要目的当作是增进自身理解能力的人，被称作“阅读的人（readers）”。</p>
<h2 id="脉络">脉络</h2>
<p>信息时代海量的资讯阻碍了理解力，对增进世界的了解没有带来实质的帮助。接收者每天得到的是他人打包好的态度和观点，长此以往，自我思考的道路将不可避免地持续荒芜。</p>
<p>阅读者，要亲手拿回逐渐被忽视的能力，像鲁迅先生在 <em>拿来主义</em> 里说的那样，“我们要运用脑髓，放出眼光，自己来拿！”</p>
<p>而面对书本这个无声的老师，就要懂得如何让书本教导我们。</p>
<h2 id="摘抄">摘抄</h2>
<blockquote>
<p>太多的资讯就如同太少的资讯一样，都是一种对理解力的阻碍。换句话说，现代的媒体正以压倒性的泛滥资讯阻碍了我们的理解力。</p>
</blockquote>
<p>计算机行业各种应用术语、互联网的黑话,也是一种对理解力的障碍。用术语扯上半小时的事情，可能用大白话五分钟就能说清。在太多的信息面前没有分析消化，将术语当作虎皮大衣，或许是一种对自身理解力的放弃。</p>
<blockquote>
<p>电视观众、收音机听众、杂志读者所面对的是一种复杂的组成——从独创的华丽辞藻到经过审慎挑选的资料与统计——目的都在让人不需要面对困难或努力，很容易就整理出“自己”的思绪。但是这些精美包装的资讯效率实在太高了，让观众、听众或读者根本用不着自己做结论。相反的，他们直接将包装过后的观点装进自己的脑海中，就像录影机愿意接受录影带一样自然。他只要按一个“倒带”的钮，就能找到他所需要的适当言论。</p>
</blockquote>
<p>这段话想起了《抢钱夫妻》里那个著名片段。</p>
<blockquote>
<p>这个读者比另一个读者更主动一些，他在阅读世界里面的探索能力就更强一些，收获更多一些，因而也更高明一些。读者对他自己，以及自己面前的书籍，要求的越多，获得的就越多。</p>
</blockquote>
<p>还是鲁迅先生的话，“总之，我们要拿来。”</p>
<blockquote>
<p>只有一种方式是真正地在阅读。没有任何外力的帮助，你就是要读这本书。你什么都没有，只凭着内心的力量，玩味着眼前的字句，慢慢地提升自己，从只有模糊的概念到更清楚地理解为止。这样的一种提升，是在阅读时的一种脑力活动，也是更高的阅读技巧。这种阅读就是让一本书向你既有的理解力做挑战。</p>
</blockquote>
<p>将书里的信息挑重点摘出来，弄成漂亮点的思维导图，是轻松和容易的，也常常给人一种已掌握的幻象。毕竟应试教育的训练下，下意识去找考点，然后花大力气去背和刷题已经成了习惯。但这在掌握原理上已经走上歧路，我无比赞同纪录片 <em>Are Our Kids Tough Enough? Chinese School</em> 里英国教师的观点，“中式学校肯定会失败的，而且是惨败。”</p>
<blockquote>
<p>这里的“学习”指的是理解更多的事情，而不是记住更多的资讯。</p>
</blockquote>
<p>中式教育必将惨败。</p>
<blockquote>
<p>蒙田说：“初学者的无知在于未学，而学者的无知在于学后。”第一种的无知是连字母都没学过，当然无法阅读。第二种的无知却是读错了许多书。英国诗人亚历山大·蒲伯（Alexander Pope）称这种人是书呆子，无知的阅读者。总有一些书呆子读得太广，却读不通。希腊人给这种集阅读与愚蠢于一身的人一种特别称呼，这也可运用在任何年纪、好读书却读不懂的人身上。他们就叫“半瓶醋”（Sophomores）。</p>
</blockquote>
<p>“有些常识的人都会记得，眼睛的困惑有两种，也来自两种起因，不是因为走出光明，就是因为走进光明所致，不论是人体的眼睛或是心灵的眼睛，都是如此。”
第一阶段：原来有这个。第二阶段：原来是这样。跨过第一阶段的人很多，达到第二阶段的人很少。跨过第一阶段的人而没有到达第二阶段的人常常会产生傲慢心而停留，回身嘲讽那些“无知”的人“没有见过世面”。唉，我们怎么会被置于如此滑稽的境地啊。</p>
<blockquote>
<p>其实，任何学习都不该没有活力，就像任何阅读都不该死气沉沉。</p>
</blockquote>
<blockquote>
<p>但如果你追寻的是一种解释，你就必须去理解它，否则没有人能向你解释清楚。更进一步来说，一位活生生的老师出现在你眼前时，你从了解他所说的话，来提升理解力。而如果一本书就是你的老师的话，你就得一切靠自己了。</p>
</blockquote>
<h2 id="想法">想法</h2>
<p><em>chapter 1</em> 读下来，观点和 <em>Amusing Ourselves to Death</em> 是一脉相承的，后者在篇幅上深度剖析了这种现象。那么本书提供了一种让自身摆脱其情境的方法，在阅读中尝试去掌握更深一层的理解，一次又一次去推进理解力。</p>
<p>自打 ChatGPT 出来后，对它的依赖程度越来越高。有时也会想，是不是以后只需要发号施令就行了。因为很多情况下，ChatGPT 能够很好的辅助工作，让人轻松不少。毕竟人不是机器，冗杂的工作是反人性的。但长时间让工具去代替思维，自己得不到成长也是件令人惋惜的事情。因此有必要进行判断，对自身毫无成长的、一眼看透的冗杂工作，丢给 ChatGPT 吧，其余的尽管多费费心思。</p>

      ]]></content></entry></feed>