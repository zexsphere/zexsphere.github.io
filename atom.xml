<?xml version="1.0" encoding="utf-8" standalone="yes"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><title>Zex</title><id>/</id><description>Recent content on Zex</description><generator>Hugo -- gohugo.io</generator><language>en</language><updated>2023-08-06T01:08:47Z</updated><link href="/atom.xml" rel="self" type="application/rss+xml"/><entry><title>Work With An Efficient Environment</title><id>/post/0003/</id><link href="/post/0003/" rel="alternate" type="text/html"/><updated>2023-08-06T01:08:47Z</updated><published>2023-08-06T01:08:47Z</published><description>该图片由 Gauthier Pous 在 Pixabay 上 发布
经验分享 文本编辑器 - vim Vim 是高度可配置的，然而定制是一件很个性化的事情，因此我试图避免建议什么应该放进你的 vimrc 里，什么不应该。相反，本书关注的是 Vim 编辑器的核心功能。 …</description><content type="html"><![CDATA[
        <p>该图片由 Gauthier Pous 在 Pixabay 上 








<a href="https://pixabay.com/zh/photos/turtle-turtle-earth-land-market-5201848/" >发布</a></p>
<h2 id="经验分享">经验分享</h2>
<h3 id="文本编辑器---vim">文本编辑器 - vim</h3>
<blockquote>
<p>Vim 是高度可配置的，然而定制是一件很个性化的事情，因此我试图避免建议什么应该放进你的 vimrc 里，什么不应该。相反，本书关注的是 Vim 编辑器的核心功能。不管你是通过 SSH 登录远端服务器工作，还是在用本地安装了插件而增添了额外功能的 GVim，这些功能都永远在那儿。精通了 Vim 的核心功能，你就获得了一个可移植的、强大的文本编辑工具。</p>
</blockquote>
<p>之前求快，学人将 Vim 打造成 IDE，上一堆插件，改键盘映射；又学人将 NVim 打造成 IDE，上一堆插件，改键盘映射。常常插件一更新，一堆报错，又去看文档，修报错。折腾来折腾去，唯独专业知识没学上几分。</p>
<p>就此老实了，写代码该用 IDE 就用 IDE，慢慢理解 Vim 核心功能才是正道。</p>
<ul>
<li>
<p>练习 vimtutor (20min)</p>
</li>
<li>
<p>实践 <em>vim 实用技巧</em></p>
</li>
<li>
<p>根据需要编写 vimscript</p>
</li>
</ul>
<p>Slow is Smooth, and Smooth is Fast.</p>
<h3 id="交互式shell---zshhttpsgithubcomzsh-userszsh">交互式shell - 








<a href="https://github.com/zsh-users/zsh" >zsh</a></h3>
<p>zsh 功能很强大，最基础的命令行历史补全，解脱重复工作。</p>
<ul>
<li>








<a href="https://github.com/ohmyzsh/ohmyzsh" >配置 ohmyzsh</a></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># ~/.zshrc</span>
</span></span><span class="line"><span class="cl"><span class="nv">plugins</span><span class="o">=(</span>
</span></span><span class="line"><span class="cl">	git                  <span class="c1"># git 命令缩写</span>
</span></span><span class="line"><span class="cl">	zsh-autosuggestions  <span class="c1"># 命令行补全</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="c1"># ... https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 不要忘了 source ～/.zshrc 让配置生效</span>
</span></span></code></pre></div><h3 id="终端复用---tmuxhttpsgithubcomtmuxtmux">终端复用 - 








<a href="https://github.com/tmux/tmux" >tmux</a></h3>
<p>工作中经常远程连接服务器的人，大多经历过链接断开的情况。随着 ssh 断连，正在进行的代码编译、定位bug、修改配置等多个窗口都没了，又要耐着性子重连，敲命令配置。</p>
<p>更普遍的场景，今天需要继续昨天做不完的工作，通过 tmux 保留工作环境可以省时间，还能帮助回忆起之前的思路。</p>
<ul>
<li>








<a href="https://github.com/gpakosz/.tmux" >配置.tmux</a></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装tmux</span>
</span></span><span class="line"><span class="cl">$ sudo pacman -S tmux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 加载 .tmux 配置</span>
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> 
</span></span><span class="line"><span class="cl">$ git clone https://github.com/gpakosz/.tmux.git
</span></span><span class="line"><span class="cl">$ ln -sf .tmux/.tmux.conf
</span></span><span class="line"><span class="cl">$ cp .tmux/.tmux.conf.local .
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配合 zsh 使用</span>
</span></span><span class="line"><span class="cl">$ vim .tmux.conf
</span></span><span class="line"><span class="cl"><span class="c1"># 添加下面两行，指定 tmux 使用 zsh</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -g default-shell /bin/zsh
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -g default-command /bin/zsh
</span></span><span class="line"><span class="cl">:wq
</span></span></code></pre></div><h3 id="垃圾回收---trash-cli">垃圾回收 - trash-cli</h3>
<p>单纯防止误删文件导致不必要的麻烦</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装</span>
</span></span><span class="line"><span class="cl">$ sudo pacman -S trash-cli
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置~/.zshrc</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">rm</span><span class="o">=</span><span class="s2">&#34;trash&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">rr</span><span class="o">=</span><span class="s2">&#34;trash-restore&#34;</span>
</span></span></code></pre></div><h2 id="参考">参考</h2>
<ul>
<li><em>








<a href="https://aquaregia.gitbooks.io/tmux-productive-mouse-free-development_zh/content/" >tmux: Productive Mouse-Free Development</a></em></li>
<li><em>








<a href="https://coolshell.cn/articles/11312.html/comment-page-2#comments" >无插件 VIM 编程技巧</a></em></li>
<li><em>Vim 实用技巧</em></li>
<li><em>Vim8 文本处理实战</em></li>
</ul>
<h2 id="rip-bram">R.I.P Bram</h2>
<p>2023/08/03 Esc :wq</p>

      ]]></content></entry><entry><title>SVN Command Line Usage With Docker</title><id>/post/0002/</id><link href="/post/0002/" rel="alternate" type="text/html"/><updated>2023-08-05T00:22:28Z</updated><published>2023-08-05T00:22:28Z</published><description>该图片由 Gerd Altmann 在 Pixabay 上发布
Self-Hosted SVN 服务属于 IO 密集型任务。相比于 Git，更适合于频繁进行大型二进制文件的存取。且内存占用极低，从自搭建情况看，一般在 3MB 左右，峰值传输 20MB 左右。
Server …</description><content type="html"><![CDATA[
        <p>该图片由 Gerd Altmann 在 Pixabay 上<a href="https://pixabay.com/zh/photos/a-book-library-read-literature-3480216/">发布</a></p>
<h2 id="self-hosted">Self-Hosted</h2>
<p>SVN 服务属于 IO 密集型任务。相比于 Git，更适合于频繁进行大型二进制文件的存取。且内存占用极低，从自搭建情况看，一般在 3MB 左右，峰值传输 20MB 左右。</p>
<h2 id="server-with-docker">Server with docker</h2>
<ol>
<li>安装服务 <code>docker compose up -d</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># docker-compose.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">svn-server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  	</span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">garethflowers/svn-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  	</span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">svn-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  	</span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;/svn:/var/opt/svn&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  	</span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;3690:3690&#39;</span><span class="w">
</span></span></span></code></pre></div><ol start="2">
<li>
<p>生成仓库 <code>docker exec -it svn-server svnadmin create repo</code></p>
</li>
<li>
<p>配置仓库账户文件 位于 <code>^/repo/conf/{svnserver.conf passwd authz}</code></p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># svnserver.conf</span>
</span></span><span class="line"><span class="cl">anon-access <span class="o">=</span> none     <span class="c1"># 非注册用户权限</span>
</span></span><span class="line"><span class="cl">auth-access <span class="o">=</span> write    <span class="c1"># 注册用户权限</span>
</span></span><span class="line"><span class="cl">password-db <span class="o">=</span> passwd   <span class="c1"># 密码文件路径</span>
</span></span><span class="line"><span class="cl">authz-db <span class="o">=</span> authz       <span class="c1"># 权限文件路径</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># passwd</span>
</span></span><span class="line"><span class="cl"><span class="nv">user</span> <span class="o">=</span> password        <span class="c1"># 填写用户名密码注册</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># authz</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>repo:/path<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">user</span> <span class="o">=</span> rw              <span class="c1"># 设置用户名拥有的仓库路径权限</span>
</span></span></code></pre></div><h2 id="client">Client</h2>
<ol>
<li>安装客户端 <code>sudo pacman -S subversion</code></li>
<li>拉取服务端仓库 <code>svn checkout svn://path</code></li>
<li>其余命令用到再查 <code>svn -h</code></li>
</ol>
<h2 id="usage">Usage</h2>
<blockquote>
<p>我是为了这点醋，才包的这顿饺子</p>
</blockquote>
<h3 id="搭建书库">搭建书库</h3>
<p>拥有一座图书馆听起来很酷，按照 <a href="https://gist.github.com/zexsphere/604a37648b7ac04cd99a5ebbd851d699">中图法</a> 将现有书籍分类，托管于云端 SVN 服务中。</p>
<p>






<img src="https://pic.imgdb.cn/item/64cdb6241ddac507cc70d920.png" alt=""  /></p>

      ]]></content></entry><entry><title>reading notes for How to Read a Book (1)</title><id>/post/0001/</id><link href="/post/0001/" rel="alternate" type="text/html"/><updated>2023-07-04T14:10:57Z</updated><published>2023-07-04T14:10:57Z</published><description>该图片由Mirosław i Joanna Bucholc在Pixabay上 发布
将读书的主要目的当作是增进自身理解能力的人，被称作“阅读的人（readers）”。
脉络 信息时代海量的资讯阻碍了理解力，对增进世界的了解没有带来实质的帮助。接收者每天得到的是他人打包好的态度和观 …</description><content type="html"><![CDATA[
        <p>该图片由Mirosław i Joanna Bucholc在Pixabay上








<a href="https://pixabay.com/zh/photos/lake-sunset-friends-pier-dusk-8030021" >发布</a></p>
<hr>
<p>将读书的主要目的当作是增进自身理解能力的人，被称作“阅读的人（readers）”。</p>
<h2 id="脉络">脉络</h2>
<p>信息时代海量的资讯阻碍了理解力，对增进世界的了解没有带来实质的帮助。接收者每天得到的是他人打包好的态度和观点，长此以往，自我思考的道路将不可避免地持续荒芜。</p>
<p>阅读者，要亲手拿回逐渐被忽视的能力，像鲁迅先生在 <em>拿来主义</em> 里说的那样，“我们要运用脑髓，放出眼光，自己来拿！”</p>
<p>而面对书本这个无声的老师，就要懂得如何让书本教导我们。</p>
<h2 id="摘抄">摘抄</h2>
<blockquote>
<p>太多的资讯就如同太少的资讯一样，都是一种对理解力的阻碍。换句话说，现代的媒体正以压倒性的泛滥资讯阻碍了我们的理解力。</p>
</blockquote>
<p>计算机行业各种应用术语、互联网的黑话,也是一种对理解力的障碍。满口框架，隔几句话必带术语的人，常常扯上半小时，其实大白话五分钟就能说清。在太多的信息面前没有分析消化，反而将术语当作虎皮大衣，是一种对自身理解力的放弃。</p>
<blockquote>
<p>电视观众、收音机听众、杂志读者所面对的是一种复杂的组成——从独创的华丽辞藻到经过审慎挑选的资料与统计——目的都在让人不需要面对困难或努力，很容易就整理出“自己”的思绪。但是这些精美包装的资讯效率实在太高了，让观众、听众或读者根本用不着自己做结论。相反的，他们直接将包装过后的观点装进自己的脑海中，就像录影机愿意接受录影带一样自然。他只要按一个“倒带”的钮，就能找到他所需要的适当言论。</p>
</blockquote>
<p>这段话想起了《抢钱夫妻》里那个著名片段。</p>
<blockquote>
<p>这个读者比另一个读者更主动一些，他在阅读世界里面的探索能力就更强一些，收获更多一些，因而也更高明一些。读者对他自己，以及自己面前的书籍，要求的越多，获得的就越多。</p>
</blockquote>
<p>还是鲁迅先生的话，“总之，我们要拿来。”</p>
<blockquote>
<p>只有一种方式是真正地在阅读。没有任何外力的帮助，你就是要读这本书。你什么都没有，只凭着内心的力量，玩味着眼前的字句，慢慢地提升自己，从只有模糊的概念到更清楚地理解为止。这样的一种提升，是在阅读时的一种脑力活动，也是更高的阅读技巧。这种阅读就是让一本书向你既有的理解力做挑战。</p>
</blockquote>
<p>对于快速阅读以求证明些什么的人，这种方法在他们看来恐被认作是愚蠢。将书里的信息挑重点摘出来，弄成漂亮点的思维导图，是轻松和容易的，也常常给人一种已掌握的幻象。毕竟应试教育的训练下，下意识去找考点，然后花大力气去背和刷题已经成了习惯。但这在掌握原理上已经走上歧路，我无比赞同纪录片 <em>Are Our Kids Tough Enough? Chinese School</em> 里英国教师的观点，“中式学校肯定会失败的，而且是惨败。”</p>
<blockquote>
<p>这里的“学习”指的是理解更多的事情，而不是记住更多的资讯。</p>
</blockquote>
<p>中式教育必将惨败。</p>
<blockquote>
<p>蒙田说：“初学者的无知在于未学，而学者的无知在于学后。”第一种的无知是连字母都没学过，当然无法阅读。第二种的无知却是读错了许多书。英国诗人亚历山大·蒲伯（Alexander Pope）称这种人是书呆子，无知的阅读者。总有一些书呆子读得太广，却读不通。希腊人给这种集阅读与愚蠢于一身的人一种特别称呼，这也可运用在任何年纪、好读书却读不懂的人身上。他们就叫“半瓶醋”（Sophomores）。</p>
</blockquote>
<p>“有些常识的人都会记得，眼睛的困惑有两种，也来自两种起因，不是因为走出光明，就是因为走进光明所致，不论是人体的眼睛或是心灵的眼睛，都是如此。”
第一阶段：原来有这个。第二阶段：原来是这样。跨过第一阶段的人很多，达到第二阶段的人很少。跨过第一阶段的人而没有到达第二阶段的人常常会产生傲慢心而停留，回身嘲讽那些“无知”的人“没有见过世面”。唉，我们怎么会被置于如此滑稽的境地啊。</p>
<blockquote>
<p>其实，任何学习都不该没有活力，就像任何阅读都不该死气沉沉。</p>
</blockquote>
<blockquote>
<p>但如果你追寻的是一种解释，你就必须去理解它，否则没有人能向你解释清楚。更进一步来说，一位活生生的老师出现在你眼前时，你从了解他所说的话，来提升理解力。而如果一本书就是你的老师的话，你就得一切靠自己了。</p>
</blockquote>
<h2 id="想法">想法</h2>
<p><em>chapter 1</em> 读下来，观点和 <em>Amusing Ourselves to Death</em> 是一脉相承的，后者在篇幅上深度剖析了这种现象。那么本书提供了一种让自身摆脱其情境的方法，在阅读中尝试去掌握更深一层的理解，一次又一次去推进理解力。</p>
<p>自打 ChatGPT 出来后，对它的依赖程度越来越高。有时也会想，是不是以后只需要发号施令就行了。因为很多情况下，ChatGPT 能够很好的辅助工作，让人轻松不少。可人不是机器，工作是反人性的。用反人性的评判标准去审视人类自身的提升，本就不合理。长时间让工具去代替思维，不远的将来必将会被工具取代。因此有必要进行判断，对自身毫无成长的、一眼看透的冗杂工作，直接丢给 ChatGPT，其余的大可多费费心思。</p>

      ]]></content></entry></feed>